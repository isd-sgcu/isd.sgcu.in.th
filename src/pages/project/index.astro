---
import Layout from "../../layouts/Layout.astro";
const projects = [
  {
    title: "something-1",
    image: "project-img.png",
  },
  {
    title: "something-2",
    image: "project-img.png",
  },
  {
    title: "something-3",
    image: "project-img.png",
  },
  {
    title: "something-4",
    image: "project-img.png",
  },
  {
    title: "something-5",
    image: "project-img.png",
  },
  {
    title: "something-6",
    image: "project-img.png",
  },
  {
    title: "something-7",
    image: "project-img.png",
  },
  {
    title: "something-8",
    image: "project-img.png",
  },
];
---

<Layout title="Projects">
  <main class="min-h-screen bg-[#0f0f0f] text-white">
    <!-- Navbar -->
    <div class="flex h-full flex-auto flex-col">
      <h1 class="ml-[40px] flex flex-none pt-3 text-3xl font-bold">Project</h1>
      <div class="flex h-full flex-auto">
        <div
          id="projects-container"
          class="no-scrollbar mt-3 flex items-center gap-x-20 overflow-x-scroll overscroll-contain scroll-smooth whitespace-nowrap"
        >
          {
            projects.map((project, idx) => (
              <button
                class={`w-fit shrink-0 ${idx == 0 ? "ml-[40px]" : ""} ${
                  idx == projects.length - 1 ? "mr-[40px]" : ""
                }`}
                onclick={`window.location.pathname = "project/${project.title}"`}
              >
                <img
                  id={project.title}
                  src={project.image}
                  alt={project.title}
                  class={`duration-300 ease-in-out ${
                    idx % 2 == 0
                      ? "h-[45vh] md:h-[70vh]"
                      : "h-[30vh] md:h-[40vh]"
                  } projects`}
                />
              </button>
            ))
          }
        </div>
      </div>
      <div class="ml-[40px] mr-[40px]">
        <div class="mt-3 flex h-1 w-full flex-row">
          <div id="progress" class="h-1 bg-white"></div>
          <div id="remain" class="h-1 w-full bg-gray-600"></div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  function applyGrayScale(percent: number) {
    const projects = document.querySelectorAll<HTMLElement>(".projects");
    for (let i = 0; i < projects.length; ++i) {
      projects[i].style.filter = `grayscale(${percent}%)`;
    }
    const hovered_project =
      document.querySelectorAll<HTMLElement>(".projects:hover");
    for (let i = 0; i < hovered_project.length; ++i) {
      hovered_project[i].style.filter = `grayscale(0%)`;
    }
  }
  const projects = document.querySelectorAll<HTMLElement>(".projects");
  projects.forEach((project) => {
    project.addEventListener("mouseover", () => {
      applyGrayScale(100);
    });
    project.addEventListener("mouseout", () => {
      applyGrayScale(0);
    });
  });
  const projects_container = document.getElementById("projects-container")!;
  projects_container.addEventListener("scroll", () => {
    const scrollLeft = projects_container.scrollLeft;
    const scrollWidth = projects_container.scrollWidth;
    const clientWidth = projects_container.clientWidth;
    const percent = (scrollLeft * 100) / (scrollWidth - clientWidth);
    const progress = document.getElementById("progress")!;
    const remain = document.getElementById("remain")!;
    const progress_percent = Math.min(percent, 100);
    const remain_precent = Math.max(100 - percent, 0);
    progress.style.width = `${progress_percent}%`;
    remain.style.width = `${remain_precent}%`;
  });
  console.log(document.getElementById("projects")!.scrollLeft);
</script>

<style>
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style>
